<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<comment>
		代码生成器配置文件:
		1.会为所有的property生成property_dir属性,如pkg=com.company => pkg_dir=com/company
	</comment>
	<!-- 配置需要在生成代码之前需要文件预处理的处理类全名,多个使用","隔开 -->
	<entry key="gg_crud_pre_bean">ExportServiceFile,DubboXMLFile,SpringMongoXMLFile,SpringShiroXMLFile,StringRedisSerializerJava</entry>
	<!-- 配置需要生成代码的数据表:默认为扫描数据库所有的数据表,多个使用","隔开 -->
	<entry key="gg_crud_tables"></entry>
	<entry key="export_provider_service">true</entry>
	<entry key="database_split_read">false</entry>
	<!-- 需要移除的表名前缀,使用逗号进行分隔多个前缀,示例值: t_,v_ -->
	<entry key="tableRemovePrefixes">t_</entry>
	<entry key="tableNameSingularize">true</entry>
	<entry key="gg_isOverride">true</entry>

	<!-- 代码生成输出目录 -->
	<entry key="dir_crud_out_root">code-out</entry>

	<!-- 数据库类型至java类型映射  -->
	<entry key="java_typemapping.java.sql.Timestamp">java.sql.Timestamp</entry>
	<entry key="java_typemapping.java.sql.Date">java.sql.Timestamp</entry>
	<entry key="java_typemapping.java.sql.Time">java.sql.Timestamp</entry>
	<entry key="java_typemapping.java.lang.Byte">Integer</entry>
	<entry key="java_typemapping.java.lang.Short">Integer</entry>
	<entry key="java_typemapping.java.lang.Integer">Long</entry>
	<entry key="java_typemapping.java.lang.Long">Long</entry>
	<entry key="java_typemapping.java.math.BigDecimal">Long</entry>
	<entry key="java_typemapping.java.sql.Clob">String</entry>

	<entry key="dir_templates_root">classpath:template/sbadmin</entry>
	<entry key="dir_crud_template_root">${dir_templates_root}/share,${dir_templates_root}/table/domain_complex,${dir_templates_root}/table/common_complex,${dir_templates_root}/table/web_complex,${dir_templates_root}/table/persistence_mybatis,${dir_templates_root}/table/project_complex,${dir_templates_root}/table/provider_complex,${dir_templates_root}/table/service_complex</entry>
	<!-- template/sbadmin模块专属参数配置 -->
	<entry key="artifactId">support</entry>
	<entry key="groupId">org.wujianjun.apps</entry>
	<entry key="mvnURL">http://www.wujianjun.org</entry>
	<entry key="mvnVersion">1.0-SNAPSHOT</entry>
	<entry key="contentPath">/support</entry>
	<entry key="author">WuJianjun</entry>
	<!-- viewresolver: velocity(default), jsp-->
	<entry key="spring_viewresolver">velocity</entry>
	<!-- 是否需要开启mongoDB支持, true/false -->
	<entry key="support_mongoDB">true</entry>
	<!-- 是否需要开启Redis支持, true/false -->
	<entry key="support_Redis">true</entry>
	<!-- 是否需要开启Shiro支持, true/false -->
	<entry key="support_Shiro">true</entry>
	<!-- 是否需要开启Dubbo支持, true/false -->
	<entry key="support_Dubbo">true</entry>
	<!-- 是否需要开启Redis缓存支持, true/false -->
	<entry key="cache_ForRedis">true</entry>

	<!-- 数据库相关配置 -->
	<entry key="jdbc_username">root</entry>
	<entry key="jdbc_password">root</entry>

	<!-- Mysql -->
	<!--<entry key="jdbc_url">jdbc:mysql://jkwin7:3306/zhangzhong?useUnicode=true&amp;characterEncoding=UTF-8</entry>-->
	<entry key="jdbc_url">jdbc:mysql://master.wujianjun.com:3306/support?useUnicode=true&amp;characterEncoding=utf8</entry>
	<entry key="jdbc_driver">org.mariadb.jdbc.Driver</entry>

	<!-- 切换不同的数据库驱动，可以影响如分页语句的生成. 因为生成器会根据jdbc_driver自动生成一个databaseType=mysql,oracle,postgresql变量 -->
	<!-- H2 -->
	<!--<entry key="jdbc_url">jdbc:h2:H:/template/dili/db/database;AUTO_SERVER=TRUE</entry>-->
	<!--<entry key="jdbc_driver">org.h2.Driver</entry>-->

	<!-- oracle使用oci的连接方式需要设置PATH环境变量及ORACLE_HOME环境变量 -->
	<!-- oracle需要指定jdbc_schema,并且可能要大写，其它数据库忽略此项配置
	<entry key="jdbc_schema"></entry>
	<entry key="jdbc_catalog"></entry>
	-->
	<!-- Oracle		jdbc:oracle:oci:@devdb01
	<entry key="jdbc_url">jdbc:oracle:thin:@192.168.0.177:1521:[sid]</entry>
	<entry key="jdbc_driver">oracle.jdbc.driver.OracleDriver</entry>
	-->

	<!-- SQLServer2000
	<entry key="jdbc_url">jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=[database]</entry>
	<entry key="jdbc_driver">com.microsoft.jdbc.sqlserver.SQLServerDriver</entry>
	-->

	<!-- SQLServer2005
	<entry key="jdbc_url">jdbc:sqlserver://192.168.0.98:1433;DatabaseName=[database]</entry>
	<entry key="jdbc_driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</entry>
	-->

	<!-- JTDs for SQLServer
	<entry key="jdbc_url">jdbc:jtds:sqlserver://192.168.0.102:1433/[database];tds=8.0;lastupdatecount=true</entry>
	<entry key="jdbc_driver">net.sourceforge.jtds.jdbc.Driver</entry>
	-->

	<!-- PostgreSql
	<entry key="jdbc_url">jdbc:postgresql://localhost/[database]</entry>
	<entry key="jdbc_driver">org.postgresql.Driver</entry>
	 -->

	<!-- Sybase
	<entry key="jdbc_url">jdbc:sybase:Tds:localhost:5007/[database]</entry>
	<entry key="jdbc_driver">com.sybase.jdbc.SybDriver</entry>
	 -->

	<!-- DB2
	<entry key="jdbc_url">jdbc:db2://localhost:5000/[database]</entry>
	<entry key="jdbc_driver">com.ibm.db2.jdbc.app.DB2Driver</entry>
	-->

	<!-- HsqlDB
	<entry key="jdbc_url">jdbc:hsqldb:mem:generatorDB</entry>
	<entry key="jdbc_driver">org.hsqldb.jdbcDriver</entry>
	-->

	<!-- Derby
	<entry key="jdbc_url">jdbc:derby://localhost/databaseName</entry>
	<entry key="jdbc_driver">org.apache.derby.jdbc.ClientDriver</entry>
	-->

	<!-- 以下为开源框架内置的模板配置, 使用sbadmin模块时可忽略以下配置 -->
	<!-- 模板目录配置,内置模块为:rapid. 可以为: 1. c:/some.jar!/subfolder   2. classpath:some_folder. 模板文件存放在jar包中
	<entry key="dir_templates_root">classpath:generator/template/rapid</entry>
	-->
	<!-- 增删改查生成器模板
		struts2 + hibernate: ${dir_templates_root}/share/basic,${dir_templates_root}/table/dao_hibernate,${dir_templates_root}/table/dao_hibernate_annotation,${dir_templates_root}/table/service_complex,${dir_templates_root}/table/web_struts2
		springmvc + mybatis: ${dir_templates_root}/share/basic,${dir_templates_root}/table/dao_mybatis,${dir_templates_root}/table/service_complex,${dir_templates_root}/table/web_springmvc_rest
	<entry key="dir_crud_template_root">${dir_templates_root}/share/basic,${dir_templates_root}/table/dao_mybatis,${dir_templates_root}/table/service_complex,${dir_templates_root}/table/web_springmvc_rest</entry>
	-->

	<!-- 模块，用于dal层sqlmap及spring配置文件的划分
	<entry key="appModule">shared</entry>
	-->

	<!-- 用于存放sequence列表，生成SeqDAO使用,使用空格，换行符分隔，示例值: seq_user seq_blog
	<entry key="sequencesList">
		seq_demo1 seq_demo2
	</entry>
	-->

	<!-- dalgen的table配置文件目录,不需要一个个列举出来,只要是这个目录下面的xml文件就可以全部扫描出来
	<entry key="dir_table_configs">tables</entry>
	-->

	<!-- dal层模板的输出目录
	<entry key="dir_dal_output_root">generator-code/target/generator-output/</entry>
	-->
</properties>